-- NOTES:
-- Only utilise the 'Count' property within the Controls table within the Master_Object table if there is more than 1 control required.


-- Information block for the plugin
PluginInfo = {
    Name = "Axis~Cameras", -- Name of the plugin
    Version = "1.1", -- Current plugin version
    Id = "qsysc.Axis Cameras", -- Unique identifier for the plugin. Must not conflict with other installed plugins
    Description = "Plugin for control of the Axis Cameras using the VAPIXÂ® Library", -- A brief description of the plugin
    BuildVersion = "0.0.0.0", -- Current code iteration tracking
    Author = "Glen Gorton", -- Name or Contact Info of the author
    Manufacturer = "Axis", -- Name of manufacturer the product the plugin integrates
    -- Model = "", -- Model name of the product the plugin integrates
    -- IsManaged = true, -- Add the plugin to the managed inventory of the design
    -- Type = "", -- Reflect reporting type
    ShowDebug = true,
  }
  
  width = 400 -- scalable plugin width
  control_depth = 16 -- scalable control depth
  control_gap = 3 -- vertical space between controls
  
  Colors = {
      none = {0, 0, 0, 0},
      primary = {212, 202, 226},
      secondary = {51, 51, 51},
      heading = {50, 50, 50},
      label = {50, 50, 50},
      stroke = {51, 51, 51},
      black = {51, 51, 51},
      navy = {15, 63, 106},
      lightblue = {143, 197, 247},
      darkgrey = {58,58,58},
      lightgrey = {204,204,204},
      yellow = {255, 204, 51}
  }
  
  Sizes = {
      ["Button"] = {36, control_depth},
      ["Text"] = {(width - 30) / 2.5, control_depth},
      ["TextMultiple"] = {(width - 30) / 5.5, control_depth},
      ["Status"] = {width - 30, (control_depth * 2) + (control_gap * 1)},
      ["LED"] = {16, control_depth},
      ["LEDButtonLarge"] = {36, control_depth * 2}, -- This large LED requires 2x GridPos
      ["ListBox"] = {width - 30, (control_depth * 8) + (control_gap * 9)},
      ["Image"] = {width - 30, (control_depth * 6) + (control_gap * 5)},
      ["CameraImage"] = {width - 130, (control_depth * 10) + (control_gap * 9)},
  }
  
  Master_Object = {{
  
      ["PageName"] = "Dashboard",
  
      ["Groupings"] = {{
          ["Name"] = "Status",
          ["Depth"] = 7,
          ["Controls"] = {{
            Name = "Status",
            PrettyName = "Dashboard~Status",
            Label = "Status",
            ControlType = "Indicator",
            IndicatorType = "Status",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Status,
            GridPos = 1
        }, {
            Name = "Model",
            PrettyName = "Dashboard~Model",
            Label = "Model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Serial",
            PrettyName = "Dashboard~Serial Number",
            Label = "Serial Number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Firmware Version",
            PrettyName = "Dashboard~Firmware Version",
            Label = "Firmware Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Date",
            PrettyName = "Dashboard~Date",
            Label = "Date",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Time",
            PrettyName = "Dashboard~Time",
            Label = "Time",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }}
      }}
  },{
      ["PageName"] = "Controls",
  
      ["Groupings"] = {{
        ["Name"] = "Preview Image",
        ["Depth"] = 11,
        ["Controls"] = {{
            Name = "Preview Image Toggle",
            PrettyName = "Controls~Preview Image Toggle",
            Label = "Preview Image Toggle",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "Preview Image",
            PrettyName = "Controls~Preview Image",
            Label = "Preview Image",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "None",
            UserPin = false,
            Size = Sizes.CameraImage,
            GridPos = 2
        }}
    }, {
        ["Name"] = "Controls",
        ["Depth"] = 10,
        ["Controls"] = {{
            Name = "Pan/Tilt (Up, Down, Left, Right)",
            PrettyName = "Controls~Pant & Tilt",
            Label = "Pan & Tilt",
            ControlType = "Button",
            ButtonType = "Momentary",
            PinStyle = "Both",
            UserPin = true,
            --Width = "Full",
            Size = Sizes.Button,
            Count = 4,
            GridPos = 1
        }, {
            Name = "Zoom (In, Out)",
            PrettyName = "Controls~Zoom (In, Out)",
            Label = "Zoom (In, Out)",
            ControlType = "Button",
            ButtonType = "Momentary",
            PinStyle = "Both",
            UserPin = true,
            --Width = "Full",
            Size = Sizes.Button,
            Count = 2,
            GridPos = 2
        }, {
            Name = "Home Position",
            PrettyName = "Controls~Home Position",
            Label = "Home Position",
            ControlType = "Button",
            ButtonType = "Momentary",
            PinStyle = "Both",
            UserPin = true,
            --Width = "Full",
            Size = Sizes.Button,
            --Count = 1,
            GridPos = 3
        }, {
            Name = "Focus (Auto)",
            PrettyName = "Controls~Focus (Auto)",
            Label = "Focus (Auto)",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            --Width = "Full",
            Size = Sizes.Button,
            --Count = 1,
            GridPos = 4
        }, {
            Name = "Preset Name",
            PrettyName = "Controls~Preset Name",
            Label = "Preset Name",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.TextMultiple,
            Count = 4,
            GridPos = 5
        }, {
            Name = "Preset (Press to Recall, Hold to Save)",
            PrettyName = "Controls~Presets",
            Label = "Presets",
            ControlType = "Button",
            ButtonType = "Momentary",
            PinStyle = "Both",
            UserPin = true,
            --Width = "Full",
            Size = Sizes.Button,
            Count = 4,
            GridPos = 6
        }, {
            Name = "Preset Active",
            PrettyName = "Controls~Preset Active",
            Label = "Preset Active",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LEDButtonLarge,
            Count = 4,
            GridPos = 7
        }, {
            Name = "Preset Status",
            PrettyName = "Controls~Preset Status",
            Label = "Preset Status",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 9
        }, {
            Name = "Reboot",
            PrettyName = "Controls~Reboot",
            Label = "Reboot",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 10
        }}
      }}
    },{
       ["PageName"] = "Setup",
  
      ["Groupings"] = {{
          ["Name"] = "Setup",
          ["Depth"] = 9,
          ["Controls"] = {{
            Name = "Connect",
            PrettyName = "Setup~Connect",
            Label = "Connect",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "IP Address",
            PrettyName = "Setup~IP Address",
            Label = "IP Address",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Username",
            PrettyName = "Setup~Username",
            Label = "Username",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Password",
            PrettyName = "Setup~Password",
            Label = "Password",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Delay Between Polling Queries",
            PrettyName = "Setup~Delay Between Polling Queries",
            Label = "Delay Between Polling Queries",
            ControlType = "Knob", 
            ControlUnit = "Integer",
            Style = "Text",
            Max = 60,
            Min = 1,
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Event Log Prefix",
            PrettyName = "Setup~Event Log Prefix",
            Label = "Event Log Prefix",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Log Entry",
            PrettyName = "Setup~Log Entry",
            Label = "Log Entry",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }, {
            Name = "Log Severity",
            PrettyName = "Setup~Log Severity",
            Label = "Log Severity",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
        }, {
            Name = "Log Trigger",
            PrettyName = "Setup~Log Trigger",
            Label = "Log Trigger",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 9
        }}
    }}
  }}
  
  
  -- Define the color of the plugin object when dragged into the design
  function GetColor(props)
      return Colors.yellow
  end
  
  -- The name that will initially display when dragged into a design
  function GetPrettyName(props)
    return string.format("Axis\nCamera\n[%s]", PluginInfo.Version)
  end
  
  -- Define User configurable Properties of the plugin
  function GetProperties()
      local props = {}
      return props
  end
  
  -- Optional function used if plugin has multiple pages
  function GetPages(props)
      local pages = {}
      for i, tbl in ipairs(Master_Object) do
        table.insert(pages, {name = tbl.PageName})
      end
      return pages
  end
  
  -- Optional function to define pins on the plugin that are not connected to a Control
  function GetPins(props)
      local pins = {}
      return pins
  end
  
  -- Optional function to update available properties when properties are altered by the user
  function RectifyProperties(props)
      return props
  end
  
  -- Optional function to define components used within the plugin
  function GetComponents(props)
      local components = {}
      return components
  end
  
  -- Optional function to define wiring of components used within the plugin
  function GetWiring(props)
      local wiring = {}
      return wiring
  end
  
  -- Defines the Controls used within the plugin
  function GetControls(props)
      local ctls = {}
      for i, page in ipairs(Master_Object) do
        for i, grouping in ipairs(page.Groupings) do
            for i, control in ipairs(grouping.Controls) do
                table.insert(ctls, control)
            end
        end
      end
      return ctls
  end
  
  -- Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
      local graphics, layout, control_slots = {}, {}, {}
      
      local page_index = props["page_index"].Value
      
      -- starting depth
      local total_depth = 0
      
      -- dynamically create graphics boxes
      for i, grouping in ipairs(Master_Object[page_index].Groupings) do
      
          total_depth = total_depth + control_depth
      
          depth = grouping.Depth
      
          len = string.len(grouping.Name)
      
          table.insert(graphics, {
              Type = "GroupBox",
              Fill = Colors.yellow,
              StrokeColor = Colors.stroke,
              StrokeWidth = 2,
              CornerRadius = 8,
              HTextAlign = "Left",
              Position = {
                  0,
                  total_depth
              },
              Size = {
                  width,
                  40 + (depth * control_depth) + ((depth - 1) * control_gap)
              }
          })
      
          -- generate control slots per group box depth and control_depth requirement
      
          grouping["Control_Slots"] = {}
      
          for n = 1, grouping.Depth do
      
              grouping["Control_Slots"][n] = ((total_depth + 25) + (control_depth * (n - 1)) + ((n - 1) * control_gap))
      
          end
      
          -- dynamically create groupbox labels
          table.insert(graphics, {
              Type = "Label",
              Text = Master_Object[page_index].Groupings[i].Name,
              -- Size = 11,
              Color = {
                  255,
                  255,
                  255
              },
              Fill = Colors.heading,
              StrokeWidth = 0,
              CornerRadius = 4,
              Position = {
                  15,
                  total_depth - 8
              },
              Size = {
                  len <= 12 and 90 or len <= 20 and 140 or len <= 30 and 170,
                  18
              },
              Font = "Montserrat",
              FontStyle = "Medium"
          })
      
          total_depth = total_depth + 40 + ((depth * control_depth) + ((depth - 1) * control_gap))
      
      end
      
      -- width of the group box minus borders
      local box_width = (width - 60)
      
      for i, grouping in ipairs(Master_Object[page_index].Groupings) do
      
          local Slots = grouping.Control_Slots
      
          for _, ctl in ipairs(grouping.Controls) do
      
              local pos_x = nil
              local pos_y = nil
      
              if (ctl.Width and (ctl.Width == "Full")) then
                  pos_x = 15
                  pos_y = (Slots[ctl.GridPos] + control_depth + control_gap)
              else
                  if (ctl.Position) then
                      pos_x = ctl.Position
                  else
                      pos_x = (width - 15) - ctl.Size[1]
                  end
                  pos_y = Slots[ctl.GridPos]
              end
      
              -- Only runs if the 'Count' property is present in the Controls properties.
              if ctl.Count then
              
                local name = ctl.Name
                local prettyname = ctl.PrettyName
                local size = ctl.Size
              
                  for n = 1 , ctl.Count do
                    
                    -- for controls with a control count > 1. Sort the pins into groups and add the number to the name
                    if ctl.Count > 1 then
                        prettyname = ctl.PrettyName..'~'..n
                        name = ctl.Name.." "..n
                    
                    -- add the control to the control column, multiple controls are added left to right
                    layout[name] = {
                        PrettyName = prettyname,
                        Legend = ctl.Legend,
                        Style = ctl.Style,
                        Size = ctl.Size,
                        Position = {
                          pos_x - ctl.Count * ctl.Size[1] +  n * ctl.Size[1],
                          pos_y
                        },
                        Font = "Droid Sans",
                        FontSize = 8
                      }
                    end
                  end
  
                else
                -- add the controls where the control count = 1
                layout[ctl.Name] = {
                    PrettyName = ctl.PrettyName,
                    Legend = ctl.Legend,
                    Style = ctl.Style,
                    Position = {
                        pos_x,
                        pos_y
                    },
                    Size = ctl.Size,
                    Font = "Droid Sans",
                    FontSize = 8
                  }
              end
              
              -- Only runs if the Controls properties contain the 'Label' property.
              if ctl.Label then
                -- Only runs if the 'Count' property is present in the Controls properties.
                if ctl.Count then
                  table.insert(graphics, {
                    Type = "Label",
                    Text = ctl.Label,
                    HTextAlign = "Left",
                    Color = Colors.black,
                    Font = "Droid Sans",
                    Position = {
                        15,
                        (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                    },
                    Size = {
                        (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Count * ctl.Size[1],
                        control_depth
                    }
                })
                else
                  table.insert(graphics, {
                      Type = "Label",
                      Text = ctl.Label,
                      HTextAlign = "Left",
                      Color = Colors.black,
                      Font = "Droid Sans",
                      Position = {
                          15,
                          (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                      },
                      Size = {
                          (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Size[1],
                          control_depth
                      }
                  })
                end
              end
      
          end
      
      end
      return layout, graphics
  end
  
  
  
  ------------------------ USER COMPONENT Runtime Code is below wrapped inside of 'if Controls then...user script...end'
  --Start event based logic
  if Controls then

--[[
# Q-SYS-Axis-Cameras-VAPIX-Library

## NOTES:
- Tested with the Axis P3224-V Mk II (non-PTZ), P3225-V Mk II (Zoom only), P3245-V (non-PTZ), P3265-V (non-PTZ), M5075 (PTZ), M5525-E (PTZ).
- P3214-V (non-PTZ) - Preview Image only. Possibly not supported by VAPIX Library. Firmware v6.50.5.8.
- P3364 (non-PTZ) - Preview Image only. Possibly not supported by VAPIX Library. Firmware v6.50.5.8.

## 30th July 2024 - Glen Gorton
- Within Capture() function, added the camera icon to the button when the 'Preview Image Toggle' is off. Moved this logic to be inside the previewTimer.EventHandler.
- Within Initialize() and Connect() functions, changed the 'Preview Image' to the camera icon.

## 10th July 2024 - Glen Gorton
- Added further detail for the Preset Status text indicator when a response comes back with "PTZ disabled". This is returned when a camera model# does not support PTZ, or PTZ functions are disabled.

## 9th July 2024 - Glen Gorton
- Added Pan/Tilt/Zoom controls.
- Added Autofocus toggle.
- Added Home Position preset select.
- Added Preset (Save & Recall), Preset Active indicators, and Preset Status text indicator.

## 5th July 2024 - Glen Gorton
- Initial script containing Preview Image polling, Preview Image Toggle button, and polling for BasicDeviceInformation and TimeInformation.

--]]


-- Services
rapidjson = require("rapidjson")
previewTimer = Timer.New()
pollTimer = Timer.New()
presetTimer = Timer.New()
timerptz = Timer.New()


-- Constants

-- QueryList for POST commands.
QueryList = {

  BasicDeviceInformation = { CGI = "basicdeviceinfo", jsonData = { apiVersion = "1.0", context = "Client defined request ID", method = "getAllProperties" } },
  TimeInformation = { CGI = "time", jsonData = { apiVersion = "1.0", context = "Client defined request ID", method = "getDateTimeInfo" } }

}

Text_Indicators = {"Model", "Serial", "Firmware Version", "Date", "Time", "Preset Status"}



-- Functions


function Initialize()
  ResetTextIndicators()
  if Controls["IP Address"].String == "" then
    SetStatus(3, "No IP Address")
    Controls["IP Address"].Color = 'Red'
    ip = Controls['IP Address'].String
  return end
  ip = Controls['IP Address'].String:match('(%d?%d?%d%.%d?%d?%d%.%d?%d?%d%.%d?%d?%d)');
  Controls["IP Address"].Color = ip and 'Green' or 'Red'
  
  Controls["Preview Image"].Legend = rapidjson.encode{IconString = string.char(0xef,0x84,0xa5)}
  --Controls["Preview Image"].Legend = rapidjson.encode({DrawChrome = false, IconData = ""})
  --SetStatus(ip and 3 or 2, ip and "" or "IP Address Invalid")
  SetStatus(ip and 5 or 2, ip and "Script Restarted" or "IP Address Invalid")
  if not ip then previewTimer:Stop() return print("User.Error: IP Address Invalid") end

  -- Set Preset Active indicators to false at connect. Active preset cannot be polled - only goes active when a preset is recalled.
  for i, ctl in ipairs(Controls["Preset Active"]) do
    ctl.Boolean = false
  end

  -- Set rebootstate to false (ie. device is not in the process of rebooting)
  rebootstate = false

  Connect()
end


function Connect()
  --SetPresetColor()
  --Controls["Preview Image"].Legend = rapidjson.encode({DrawChrome = false, IconData = ""})
  Controls["Preview Image"].Legend = rapidjson.encode{IconString = string.char(0xef,0x84,0xa5)}
  if not Controls["Connect"].Boolean then
    ResetTextIndicators()
    SetStatus(3, "Component Manually Disconnected")
    previewTimer:Stop()
    pollTimer:Stop()
    return end
  Capture()
  pollTimer:Start(1)
end


function ResetTextIndicators()
  for i, control_name in ipairs(Text_Indicators) do
    Controls[control_name].String = ""
  end
  for i, preset_name in ipairs(Controls["Preset Name"]) do
    preset_name.String = ""
  end
end


function SetStatus(code, message, lookup)

  -- if there's a lookup key, fetch the code and message
  if lookup then
    code = status_tbl[lookup].code
    message = status_tbl[lookup].message
  end
  
  Controls["Status"].Value = code
  Controls["Status"].String = string.format("%s%s%s", message, (message == "") and "" or ": ", ip and ip or "None")
  
  if (code ~= 0) then return print(string.format("User.Info: Settings Status with Code: '%d', Message: '%s'", code, message)) end
  if (code == 2) then SetPresetColor() end
end


function EventLog(log, severity)
  Controls["Log Entry"].String = string.format("%s: %s", Controls["EventLog Prefix"].String, log)
  Controls["Log Severity"].String = severity
  Controls["Log Trigger"]:Trigger()
end


function SetPresetColor(active)
  for i, c in ipairs(Controls["Preset (Press to Recall, Hold to Save)"]) do
    Controls["Preset Active"][i].Boolean = (active == i)
  end
end


function HttpDownload(...)

  if not ip then return print("User.Error: IP address invalid") end
  
  if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end
  
  args = table.pack(...); args.n = nil
  query = ""
  for i, v in ipairs(args) do
    query = query..v.."&"
  end
  query = string.sub(query, 0 , (string.len(query)-1))
  --print(query)
  
  HttpClient.Download{
    Url = "http://"..ip.."/axis-cgi/"..query,
    User = Controls["Username"].String,
    Password = Controls["Password"].String,
    Headers = {
      ["Content-Type"] = "application/json",
      --["Authorization"] = auth
    },
    Timeout = 5,
    EventHandler = Result
  }
end


function HttpUpload(query, jsonData)

  if not ip then return print("User.Error: IP address invalid") end
  
  if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end
    
  HttpClient.Upload{
      Url = "http://"..ip.."/axis-cgi/"..query..".cgi",
      Method = "POST",
      User = Controls["Username"].String,
      Password = Controls["Password"].String,
      Headers = {
        ["Content-Type"] = "application/json"
      },
      Data = rapidjson.encode(jsonData),
      Timeout = 3,
      EventHandler = Result
  }
end


function Poll()
  pollTimer:Stop()

  -- check if device is rebooting. Used to prevent commands being sent.
  if rebootstate == true then return end

  -- Send commands from the QueryList table.
  local count = 0
  
  for i, data in pairs(QueryList) do
    Timer.CallAfter(function()

      -- check if device is rebooting. Used to prevent commands being sent.
      if rebootstate == true then return end
      
      print("QueryList VAPIX Library item: "..i)
      print("Command to be sent: "..QueryList[i]["CGI"], QueryList[i]["jsonData"])
      --print(rapidjson.encode(QueryList[i]["jsonData"]))
      HttpUpload(QueryList[i]["CGI"], QueryList[i]["jsonData"])
      --for key, value in pairs(data) do
        --print(key, value)
      --end
      end, count)
    count = count + 1
  end

  -- Poll for the PTZ (autofocus) information, using GET request. Found "query=status" by using Chrome Developer Tools" on the Installation page of the camera.
  -- "query=status" is not mentioned in the Pan/tilt/zoom API.
  --HttpDownload("com/ptz.cgi?info=1")
  HttpDownload("com/ptz.cgi?query=status")
  HttpDownload("com/ptz.cgi?query=presetposall")

  -- Restart the pollTimer following the last count of queries from the QueryList table.
  Timer.CallAfter(function()
    pollTimer:Start(Controls["Delay Between Polling Queries"].Value)
  end, count)
end


function Result(tbl, code, data, err, headers)
  print(string.format( "HTTP response from '%s': Return Code=%i; Error=%s", tbl.Url, code, err or "None" ) )
  --print("Headers:")
  --for hName,Val in pairs(headers) do
  --print(string.format( "\t%s = %s", hName, Val ) )
  --end
  print( "\rHTML Data: "..data )

  -- 'Reboot' Command Response - will SetStatus to Initializing and Initialize()/reconnect after 60 seconds. pollDelayTimer:Stop() is also within the Reboot EventHandler.
  if string.match(tbl.Url, "restart.cgi") then
    print("DEVICE REBOOTED")
    pollTimer:Stop()
    previewTimer:Stop()
    ResetTextIndicators()
    Timer.CallAfter(Initialize, 60)

    -- Set a rebootstate variable used in the Poll() function
    rebootstate = true
  return SetStatus(5, "Device Rebooted") end


  if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end

  if (code == 0.0) then return SetStatus(3, string.format("Camera Unreachable - Response Code %d", code)) end

  if (code == 401.0) then return SetStatus(1, string.format("Login Unauthorized", code)) end

  if not (code == 200.0) then return SetStatus(1, string.format("Non '200' Response - Response Code %d", code)) end

  SetStatus(0, string.format("", code))


  -- Model Number
  model_number = (string.match(data,'"ProdNbr": "(.-)",'))
  if model_number then
    --print("Model Number: " ..model_number)
    Controls["Model"].String = model_number
  end

  -- Serial Number
  serial_number = (string.match(data,'"SerialNumber": "(.-)",'))
  if serial_number then
    --print("Serial Number: " ..serial_number)
    Controls["Serial"].String = serial_number
  end

  -- Firmware Version
  firmware_version = (string.match(data,'"Version": "(.-)",'))
  if firmware_version then
    --print("Firmware Version: " ..firmware_version)
    Controls["Firmware Version"].String = firmware_version
  end

  -- Date
  date = (string.match(data,'"localDateTime": "(.-)T'))
  if date then
    --print("Date: " ..date)
    Controls["Date"].String = date
  end

  -- Time
  time = (string.match(data,'"localDateTime": "%d+-%d+-%d+T(%d+:%d+:%d+)'))
  if time then
    --print("Time: " ..time)
    Controls["Time"].String = time
  end

  -- Focus (Auto)
  -- Will respond with autofocus=off or autofocus=on. Able to use "on" or "off" as the toggle control .String
  autofocus = (string.match(data,'autofocus=(%w+)'))
  if autofocus then
    --print("Autofocus: " ..autofocus)
    Controls["Focus (Auto)"].String = autofocus
  end

  -- Preset Name
  for i, ctl in ipairs (Controls["Preset Name"]) do
    presetname = (string.match(data,'presetposno'..i..'=(.-)\n'))
    if presetname then
      presetname = presetname:sub(1,-2) -- :sub is used to remove the \n new line character from the string.match.
      --print(presetname)
      Controls["Preset Name"][i].String = presetname
    end
  end

  -- Preset Active & Preset Status Text Indicator
  -- If no preset exists when the preset recall command is sent, set the Preset Active boolean to false.
  -- Elseif the camera model# doesn't have PTZ controls, or PTZ is disabled.
  for i, ctl in ipairs (Controls["Preset Active"]) do
    if string.match(data, "goto preset: No such preset position found") then
      --located the preset number from the previous command sent:
      --print(tbl.Url)
      -- use :sub(-1) to match the last character in the previous command (ie. preset number)
      --print(tbl.Url:sub(-1))
      local nopresetexists = tbl.Url:sub(-1)
        if tostring(i) == nopresetexists then
          Controls["Preset Active"][i].Boolean = false

          -- Update Present Status indicator text box.
          Controls["Preset Status"].String = "Preset "..(i).." does not exist."
          
          -- Clear the message in the Preset Status box after 4 seconds
          Timer.CallAfter(function()
            Controls["Preset Status"].String = ""
            --c.Legend = i
          end, 4)
        end
    elseif string.match(data, "PTZ disabled") then
      --located the preset number from the previous command sent:
      --print(tbl.Url)
      -- use :sub(-1) to match the last character in the previous command (ie. preset number)
      --print(tbl.Url:sub(-1))
      local noPTZ = tbl.Url:sub(-1)
        if tostring(i) == noPTZ then
          Controls["Preset Active"][i].Boolean = false

          -- Update Present Status indicator text box.
          Controls["Preset Status"].String = "PTZ not supported by camera, or PTZ disabled."
          
          -- Clear the message in the Preset Status box after 4 seconds
          Timer.CallAfter(function()
            Controls["Preset Status"].String = ""
            --c.Legend = i
          end, 4)
        end
    end
  end

  -- Preset Status Text Indicator
  -- If the camera model# doesn't have PTZ controls, or PTZ is disabled.
  if string.match(data, "PTZ disabled") then
    -- Update Present Status indicator text box.
    Controls["Preset Status"].String = "PTZ not supported by camera, or PTZ disabled."
  end

end


-------------------------
----- Preview Image -----
-------------------------

function Capture()
  
  if not ip then return print("User.Error: IP address invalid") end

  previewTimer.EventHandler = function()
    
    if not Controls["Preview Image Toggle"].Boolean == true then 
      previewTimer:Stop()
      print("Preview Image Toggle OFF. Preview Image no longer updating.")
      Controls["Preview Image"].Legend = rapidjson.encode{IconString = string.char(0xef,0x84,0xa5)}
    return end
    
    HttpClient.Download {
      Url = "http://"..ip.."/axis-cgi/jpg/image.cgi",
      User = Controls["Username"].String,
      Password = Controls["Password"].String,
      Headers = {
        ["Content-Type"] = "application/json",
        --["Authorization"] = auth
      } ,
      Timeout = 2,
      EventHandler = function(tbl, code, data, err, headers)
        
        if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end
        
        if (code == 0.0) then return SetStatus(3, string.format("Camera Unreachable - Response Code %d", code)) end
        
        if (code == 401.0) then return SetStatus(1, string.format("Login Unauthorized", code)) end
        
        if not (code == 200.0) then return SetStatus(1, string.format("Unable to Fetch Preview - Response Code %d", code)) end
        
        SetStatus(0, string.format("", code))
        
        -- print(string.format( "HTTP response from '%s': Return Code=%i; Error=%s", tbl.Url, code, err or "None" )..". User.Info: Downloading Image.."..headers.Date)

        iconstyle = {
          DrawChrome = false,
          IconData = Crypto.Base64Encode(data)
        }
        
        Controls["Preview Image"].Legend = rapidjson.encode(iconstyle) 
      end
    }
  end
  
  previewTimer:Start(1)
  
end


-- EVENTHANDLERS --


-- Pan/Tilt Commands
-- Command is sent at quick button tap, then every 0.8 seconds if held down.

Pan_Tilt = {"move=up", "move=down", "move=left", "move=right"}
Controls["Pan/Tilt (Up, Down, Left, Right)"][1].Legend = "Up"
Controls["Pan/Tilt (Up, Down, Left, Right)"][2].Legend = "Down"
Controls["Pan/Tilt (Up, Down, Left, Right)"][3].Legend = "Left"
Controls["Pan/Tilt (Up, Down, Left, Right)"][4].Legend = "Right"

for i, ctl in ipairs(Controls["Pan/Tilt (Up, Down, Left, Right)"]) do
  ctl.EventHandler = function(c)
    if ctl.Boolean == true then
      local Command = Pan_Tilt[i]
      HttpDownload("com/ptz.cgi?"..Command)
      timerptz:Start(0.8)
      timerptz.EventHandler = function()
        local Command = Pan_Tilt[i]
        HttpDownload("com/ptz.cgi?"..Command)
      end
    elseif ctl.Boolean == false then
      timerptz:Stop()
      Command = HttpDownload("com/ptz.cgi?move=stop")
    end
  end
end


-- Zoom Commands
-- Command is sent at quick button tap, then every 0.8 seconds if held down.

Zoom = {"rzoom=800", "rzoom=-800"}
Controls["Zoom (In, Out)"][1].Legend = "+"
Controls["Zoom (In, Out)"][2].Legend = "-"

for i, ctl in ipairs(Controls["Zoom (In, Out)"]) do
  ctl.EventHandler = function(c)
    if ctl.Boolean == true then
      local Command = Zoom[i]
      HttpDownload("com/ptz.cgi?"..Command)
      timerptz:Start(0.8)
      timerptz.EventHandler = function()
        local Command = Zoom[i]
        HttpDownload("com/ptz.cgi?"..Command)
      end
    elseif ctl.Boolean == false then
      timerptz:Stop()
      Command = HttpDownload("com/ptz.cgi?move=stop")
    end
  end
end


-- Autofocus On/Off
Controls["Focus (Auto)"].EventHandler = function (ctl)
  if ctl.Boolean == true then
    Command = "autofocus=on" 
    HttpDownload("com/ptz.cgi?"..Command)
  elseif ctl.Boolean == false then
    Command = "autofocus=off" 
    HttpDownload("com/ptz.cgi?"..Command)
  end
end


-- Home Position
-- Will select whatever Preset has been selected as the Home position. (There is a 'Home position' toggle within the camera preset configuration in the camera web interface).
Controls["Home Position"].EventHandler = function (ctl)
  HttpDownload("com/ptz.cgi?move=home")
end


-- Preset Name
-- Present name cannot be blank. Preset will be deleted if Preset Name is blank.
for i, ctl in ipairs(Controls["Preset Name"]) do
  ctl.EventHandler = function(c)
    if ctl.String == "" then
      -- if Preset Name is blank, set preset name to preset number.
      --HttpDownload("com/ptzconfig.cgi?renameserverpresetno="..i.."&newname="..i)
      
      -- if Preset Name is blank, delete the specified preset position.
      HttpDownload("com/ptzconfig.cgi?removeserverpresetno="..i)
      
    elseif ctl.String ~= nil then
      HttpDownload("com/ptzconfig.cgi?renameserverpresetno="..i.."&newname="..(ctl.String):gsub(" ", "%%20")) -- gsub used to insert %20 to GET request if there is a space character in the preset name.
    end
  end
end

-- Preset Save & Recall Combined Button Commands
for i, ctl in ipairs(Controls["Preset (Press to Recall, Hold to Save)"]) do
  
  -- Add display numbers to each Preset button.
  ctl.Legend = i
  ctl.EventHandler = function(c)
    
    -- If button is held for a 'long press', Set the Preset
    presetTimer.EventHandler = function()
      presetTimer:Stop()
      
      print("User.Info: Setting Preset "..i)
      
      isLongPress = true
      
      HttpDownload("com/ptzconfig.cgi?setserverpresetno="..i)

      -- Update Present Status indicator text box.
      Controls["Preset Status"].String = "Preset ".. (i) .." Saved"
      
      -- Clear the message in the Preset Status box after 4 seconds
      Timer.CallAfter(function()
        Controls["Preset Status"].String = ""
        --c.Legend = i
      end, 4)

      SetPresetColor(i)
    end
    
    if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end
    
    -- If button is held, start 'long press' timer and return here
    if c.Boolean then return presetTimer:Start(3) end
    
    -- If button is released and it was a 'long press', do nothing and return here
    if isLongPress then isLongPress = false return end
    
    -- If button is released and it was a 'short press', Recall the Preset
    presetTimer:Stop()
    print("User.Info: Calling Preset "..i)
    HttpDownload("com/ptz.cgi?gotoserverpresetno="..i)

    -- Update Present Status indicator text box.
    Controls["Preset Status"].String = "Recalling Preset ".. (i)
    
    -- Clear the message in the Preset Status box after 4 seconds
    Timer.CallAfter(function()
      Controls["Preset Status"].String = ""
      --c.Legend = i
    end, 4)

    SetPresetColor(i)
      
  end
end

-- Reboot: To restart the camera.
Controls["Reboot"].EventHandler = function(c)
  pollTimer:Stop()
  previewTimer:Stop()
  HttpDownload("restart.cgi")
end



Controls["IP Address"].EventHandler = Initialize
Controls["Connect"].EventHandler = Connect
Controls["Preview Image Toggle"].EventHandler = Capture
pollTimer.EventHandler = Poll
Initialize()

end